---
apiVersion: batch/v1
kind: Job
metadata:
  name: check-postgress-reachable-and-readable
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        app: check-postgress-reachable-and-readable
    spec:
      containers:
      - name: postgres
        image: postgres:14.2-alpine3.15
        env:
          - name: POSTGRES_HOST
            value: postgres
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_USER
            value: root
          - name: PGPASSWORD
            value: root
          - name: POSTGRES_DB
            value: rootdb
        command:
        - ash
        - -c
        - |
          set -o errexit
          set -o nounset
          # set -o xtrace

          if set +o | grep -F 'set +o pipefail' > /dev/null; then
            # shellcheck disable=SC3040
            set -o pipefail
          fi

          if set +o | grep -F 'set +o posix' > /dev/null; then
            # shellcheck disable=SC3040
            set -o posix
          fi

          #only works in bash
          #timeout 120 sh -c "while ! timeout 1 bash -c 'cat < /dev/null > /dev/tcp/${POSTGRES_HOST}/5432'; do sleep 1; echo -n .; done";
          
          timeout 120 sh -c "while ! timeout 1 ash -c 'nc -z ${POSTGRES_HOST} ${POSTGRES_PORT}'; do sleep 1; printf '%s' '.'; done";
          echo √ postgres port open;

          psql --host=${POSTGRES_HOST} --username=${POSTGRES_USER} --dbname=${POSTGRES_DB} -c '\l' > /dev/null;
          echo √ postgress access works;

          echo done;
      restartPolicy: Never


---
apiVersion: batch/v1
kind: Job
metadata:
  name: check-app-api
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        app: check-app-api
    spec:
      containers:
      - name: tests
        image: tests-tilt-ref
        env:
          - name: POSTGRES_HOST
            value: postgres
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_USER
            value: root
          - name: PGPASSWORD
            value: root
          - name: POSTGRES_DB
            value: rootdb
          - name: APP_API_HOST
            value: app-api
          - name: APP_API_PORT
            value: "80"
        command:
        - ash
        - -c
        - |
          set -o errexit
          set -o nounset
          # set -o xtrace

          if set +o | grep -F 'set +o pipefail' > /dev/null; then
            # shellcheck disable=SC3040
            set -o pipefail
          fi

          if set +o | grep -F 'set +o posix' > /dev/null; then
            # shellcheck disable=SC3040
            set -o posix
          fi

          echo wait for api ready
          #timeout 60 sh -c "while ! (curl --max-time 1 -s --fail -o /dev/null ${APP_API_HOST}:${APP_API_PORT}/api/v1/health); do printf '%s' '.'; sleep 1; done;"
          #timeout 120 sh -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' ${APP_API_HOST}:${APP_API_PORT}/api/v1/health)" != "200" ]]; do sleep 5; done' || false

          #export API_URL=${APP_API_HOST}:${APP_API_PORT}/api/v1/health
          #export STATUS=200
          #while [[ "${STATUS_RECEIVED:-}" != "${STATUS}" ]]; do
          #    STATUS_RECEIVED=$(curl --max-time 1 -s -o /dev/null -L -w ''%{http_code}'' ${API_URL} || true);
          #    echo "received status: $STATUS_RECEIVED";
          #    sleep 1;
          #done;

          func_curl_check_endpoint() {
            TEST_ENDPOINT=${1:-http://localhost:80/healthz}

            echo "test endpoint: ${TEST_ENDPOINT}"
            curl -v --fail --silent -o /dev/null -X 'GET' \
              --connect-timeout 1 \
              --max-time 5 \
              --retry 60 \
              --retry-delay 1 \
              --retry-max-time 120 \
              "${TEST_ENDPOINT}" \
              -H 'accept: application/json'
          }

          func_curl_check_endpoint "http://${APP_API_HOST}:${APP_API_PORT}/api/v1/health"

          echo api reachable/healthy

          # === test api ======================================================

          echo done;
      restartPolicy: Never


---
apiVersion: batch/v1
kind: Job
metadata:
  name: check-app-api-newman
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        app: check-app-api-newman
    spec:
      initContainers:
        - name: tests
          image: tests-tilt-ref
          env:
            - name: APP_API_HOST
              value: app-api
            - name: APP_API_PORT
              value: "80"
            - name: API_PATH
              value: /api/v1
          command:
            - ash
            - -c
            - |
              set -o errexit
              set -o nounset
              # set -o xtrace

              if set +o | grep -F 'set +o pipefail' > /dev/null; then
                # shellcheck disable=SC3040
                set -o pipefail
              fi

              if set +o | grep -F 'set +o posix' > /dev/null; then
                # shellcheck disable=SC3040
                set -o posix
              fi

              export APIURL=http://${APP_API_HOST}:${APP_API_PORT}${API_PATH}

              func_curl_check_endpoint() {
                TEST_ENDPOINT=${1:-http://localhost:80/healthz}

                echo "test endpoint: ${TEST_ENDPOINT}"
                curl -v --fail --silent -o /dev/null -X 'GET' \
                  --connect-timeout 1 \
                  --max-time 5 \
                  --retry 60 \
                  --retry-delay 1 \
                  --retry-max-time 120 \
                  "${TEST_ENDPOINT}" \
                  -H 'accept: application/json'
              }

              func_curl_check_endpoint "${APIURL}/health"

              echo api reachable/healthy

              # === api create user ======================================================

              REGISTRATION_JSON=$(cat <<END_HEREDOC
              {
                "user":{
                  "username": "Jacob",
                  "email": "jake@jake.jake",
                  "password": "jakejake"
                }
              }
              END_HEREDOC
              )

              printf 'REGISTRATION_JSON:\n%s\n' "${REGISTRATION_JSON}"

              # allowed to fail (not perfect but atm easiest way for user-already-exist kind of check)
              curl -v --header "Content-Type: application/json" \
                --request POST \
                --data "${REGISTRATION_JSON}" \
                "${APIURL}/users"

              echo ""

              echo done;
      containers:
        - name: test-api-newman
          image: tests-api-newman-tilt-ref
          env:
            - name: APP_API_HOST
              value: app-api
            - name: APP_API_PORT
              value: "80"
            - name: API_PATH
              value: /api/v1
            # - name: USERNAME
            #   value: Jacob
            # - name: EMAIL
            #   value: jake@jake.jake
            # - name: PASSWORD
            #   value: jakejake
          command:
            - ash
            - -c
            - |
              set -o errexit
              set -o nounset
              # set -o xtrace

              if set +o | grep -F 'set +o pipefail' > /dev/null; then
                # shellcheck disable=SC3040
                set -o pipefail
              fi

              if set +o | grep -F 'set +o posix' > /dev/null; then
                # shellcheck disable=SC3040
                set -o posix
              fi

              export APIURL=http://${APP_API_HOST}:${APP_API_PORT}${API_PATH}

              cd /api && ./run-api-tests.sh

              echo done
      restartPolicy: Never


# ---
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: check-postgress-reachable-check-done
# spec:
#   backoffLimit: 0
#   template:
#     metadata:
#       labels:
#         app: check-postgress-reachable-check-done
#     spec:
#       containers:
#       - name: kubectl
#         image: bitnami/kubectl:1.23.6
#         command:
#         - bash
#         - -c
#         - |
#           set -o errexit
#           set -o nounset
#           # set -o xtrace

#           if set +o | grep -F 'set +o pipefail' > /dev/null; then
#             # shellcheck disable=SC3040
#             set -o pipefail
#           fi

#           if set +o | grep -F 'set +o posix' > /dev/null; then
#             # shellcheck disable=SC3040
#             set -o posix
#           fi

#           kubectl get no
#       restartPolicy: Never

